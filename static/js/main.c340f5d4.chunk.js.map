{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MovieGenre","_ref2","genre","react_default","a","createElement","className","MoviePoster","_ref3","poster","alt","src","title","Movie","_ref","genres","synopsis","class","map","index","key","myInit","method","headers","Headers","mode","cache","App","state","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","console","log","setState","stop","fetch","then","response","json","data","catch","err","_renderMovies","movie","src_Movie","title_english","medium_cover_image","id","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qTAuBA,SAASA,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACjB,OACIC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBJ,GAIxC,SAASK,EAATC,GAAkC,IAAZC,EAAYD,EAAZC,OAAOC,EAAKF,EAALE,IACzB,OACIP,EAAAC,EAAAC,cAAA,OAAKM,IAAKF,EAAQC,IAAMA,EAAKE,MAAOF,EAAKJ,UAAU,kBAoB5CO,MA/Cf,SAAAC,GAAgD,IAAhCF,EAAgCE,EAAhCF,MAAQH,EAAwBK,EAAxBL,OAAOM,EAAiBD,EAAjBC,OAAOC,EAAUF,EAAVE,SAClC,OACIb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAACE,EAAD,CAAaU,MAAM,gBAAgBR,OAAQA,EAAQC,IAAKE,KAE5DT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,UAAKO,GACLT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACVS,EAAOG,IAAI,SAAChB,EAAMiB,GAAP,OAAiBhB,EAAAC,EAAAC,cAACL,EAAD,CAAYiB,MAAM,gBAAgBf,MAAOA,EAAOkB,IAAKD,OAEtFhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACVU,MCVjBK,EAAS,CAAEC,OAAQ,MACRC,QAHC,IAAIC,QAILC,KAAM,OACNC,MAAO,WAgDPC,6MA5CfC,MAAQ,KAOLC,gCAAa,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAA5B,EAAA6B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACSC,EAAKC,WADd,OACNP,EADMG,EAAAK,KAEZC,QAAQC,IAAIV,GACZM,EAAKK,SAAS,CACZX,WAJU,wBAAAG,EAAAS,SAAAb,QAOdQ,SAAW,WACT,OAAOM,MAAM,4DAA4DvB,GACxEwB,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKjB,SACvBkB,MAAM,SAAAC,GAAG,OAAIV,QAAQC,IAAIS,QAI5BC,cAAgB,WAQd,OAPed,EAAKT,MAAMG,OAAOb,IAAI,SAACkC,EAAOjC,GAC3C,OAAOhB,EAAAC,EAAAC,cAACgD,EAAD,CAAOzC,MAAOwC,EAAME,cAC1B7C,OAAQ2C,EAAMG,mBACbnC,IAAKgC,EAAMI,GACXzC,OAAUqC,EAAMrC,OAChBC,SAAYoC,EAAMpC,iGAzBtByC,KAAK5B,8CA+BL,OADAW,QAAQC,IAAI,UAEVtC,EAAAC,EAAAC,cAAA,OAAKC,UAAWmD,KAAK7B,MAAMG,OAAS,MAAQ,gBACzC0B,KAAK7B,MAAMG,OAAS0B,KAAKN,gBAAkB,kBAtClCO,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.c340f5d4.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Movie.css';\r\n\r\nfunction Movie({title , poster,genres,synopsis}){\r\n    return(\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Columns\">\r\n                <MoviePoster class=\"Movie__Poster\" poster={poster} alt={title}></MoviePoster>\r\n            </div>\r\n            <div className=\"Movie__Columns\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genre,index) => <MovieGenre class=\"Movie__Genres\" genre={genre} key={index}></MovieGenre>)}\r\n                </div>\r\n                <div className=\"Movie__synopsis\">\r\n                    {synopsis}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n    return (\r\n        <span className=\"Movie__Genre\">{genre}</span>\r\n    )\r\n}\r\n\r\nfunction MoviePoster({poster,alt}){\r\n    return (\r\n        <img src={poster} alt ={alt} title={alt} className=\"Movie__Poster\"></img>\r\n    )\r\n}\r\n\r\n\r\nMovieGenre.propTypes = {\r\n    genre : PropTypes.string.isRequired\r\n}\r\n\r\nMovie.propTypes = {\r\n    title : PropTypes.string.isRequired,\r\n    poster : PropTypes.string.isRequired,\r\n    genres : PropTypes.array.isRequired,\r\n    synopsis : PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster : PropTypes.string.isRequired,\r\n    alt : PropTypes.string.isRequired\r\n}\r\nexport default Movie;\r\n","import React ,{Component}from 'react';\r\nimport './App.css';\r\nimport Movie from './Movie';\r\n\r\nvar myHeaders = new Headers();\r\n\r\nvar myInit = { method: 'GET',\r\n               headers: myHeaders,\r\n               mode: 'cors',\r\n               cache: 'default' };\r\n\r\nclass App extends Component {\r\n \r\nstate = {}\r\n\r\n  componentDidMount( ){\r\n    this._getMovies();\r\n  }\r\n\r\n  \r\n   _getMovies = async () =>{\r\n    const movies = await this._callApi()\r\n    console.log(movies);\r\n    this.setState({\r\n      movies \r\n    })\r\n  }\r\n  _callApi = () =>{\r\n    return fetch('https://yts.lt/api/v2/list_movies.json?sort_by=like_count',myInit)\r\n    .then(response => response.json())\r\n    .then(json => json.data.movies)\r\n    .catch(err => console.log(err))\r\n  }\r\n\r\n  \r\n  _renderMovies = () => {\r\n    const movies = this.state.movies.map((movie, index) =>{\r\n      return <Movie title={movie.title_english}\r\n       poster={movie.medium_cover_image}\r\n        key={movie.id}\r\n        genres = {movie.genres}\r\n        synopsis = {movie.synopsis}/>\r\n    })\r\n    return movies\r\n  }\r\n  render(){\r\n    console.log('render');\r\n    return (\r\n      <div className={this.state.movies ? 'App' : 'Loading--App'}>\r\n        {this.state.movies ? this._renderMovies() : 'Loading'}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}